##
title = "AJAX Framework"
url = "/ajax"
layout = "default"

[resources]
less[] = "pages/ajax.less"
==
<?
function onTraceLog()
{
    traceLog(input());
}

function onTestSelector()
{
    return ['=[data-anyselector]' => 'Success <span>Should Be Red</span>'];
}

function onAjaxBrowserEvent()
{
    if (post('force')) {
        Flash::success('Done!');
        return;
    }

    $this->dispatchBrowserEvent('test:browserevent', ['name' => 'Jeff']);
    throw new AjaxException;
}

function onTestAbort()
{
    sleep(2);
    throw new ApplicationException('Abort failed!');
}
?>
==
<div class="container">
    <h1>AJAX Tests</h1>

    <div class="card text-bg-success mb-3">
        {% ajaxPartial 'ajax/ajax-lazy-content' lazy body %}
            <div class="card-body">
                <em>Lazy Loading Content...</em>
            </div>
        {% endpartial %}
    </div>

    <!-- Testing Custom Selector -->
    <div data-anyselector id="customSelector" class="panel p-2">
        Content Will Go Here
    </div>

    <form>
        <input type="hidden" name="input" value="1">
        <a
            href="#"
            data-request="onTestSelector"
            data-request-success="$('#customSelector > span').css('color', 'red')"
            >Test Custom Selector</a>
    </form>

    <!-- Testing Data Object from jQuery -->
    <script>
        function getChecked() { return [1,2,3]; }
    </script>
    <form>
        <input type="hidden" name="models[test=1]" value="value" />
        <input type="hidden" name="input" value="1" />
        <a href="#"
        data-request="onAjax"
        onclick="$(this).data('request-data', { additional: getChecked() });"
        >Test Data Object</a>
    </form>

    <form>
        <input type="hidden" name="input" value="1">
        <a href="#"
            data-request="onAjax"
            onclick="console.log('clicked'); $(this).data('request-data', 'additional:1');"
        >Trigger Data String</a>
    </form>

    <form>
        <input type="hidden" name="input" value="1">
        <a href="#" id="target" data-request="onAjax"></a>

        <a href="javascript:runTest()">Trigger Click Event</a>
    </form>

    <script>
        function runTest() {
            console.log('Running Request');
            $('#target').data('request-data', 'additional:1').get(0).click();
        }
    </script>

    <form id="customEventForm">
        <input type="hidden" name="input" value="1">
        <a href="javascript:runCustomEvent()">Trigger Custom Event</a>
    </form>

    <form id="customAbortForm">
        <input type="hidden" name="input" value="1">
        <a href="javascript:runCustomEventWithAbort()">Trigger Aborted Event</a>
    </form>

    <script>
        function runCustomEvent() {
            console.log('Running Request');
            oc.request('#customEventForm', 'onAjax', { data: { additional: 1 } });
        }

        function runCustomEventWithAbort() {
            console.log('Running Request');
            var request = oc.request('#customAbortForm', 'onTestAbort', { data: { additional: 1 } });
            setTimeout(function() {
                console.log('Aborting Request');
                request.abort();
            }, 1000)
        }
    </script>

    <form id="browserEventForm">
        <a href="javascript:;" data-request="onAjaxBrowserEvent" data-request-flash>Trigger Browser Event</a>
    </form>

    <script>
        addEventListener('test:browserevent', function (event) {
            if (confirm(event.detail.name + ' user has updated this document, proceed?')) {
                oc.request(event.target, null, { data: {
                    force: true
                }});
            }
        });
    </script>

    <hr />
    <h3>Testing Polling Updates</h3>

    {% ajaxPartial 'ajax/ajax-polling-content' %}

    <hr />
    <h3>Testing Updates via Syntax</h3>

    <div id="customSelectorForUpdates" class="panel p-2">
        Content Will Go Here
    </div>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onAjax"
        data-request-update="{partial-with-script: '#customSelectorForUpdates'}"
    >Test Update</a>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onAjax"
        data-request-update="{'partial-with-script': '!.partial-with-script'}"
    >Test Replace With</a>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onAjax"
        data-request-update="{'partial-with-script': '@#customSelectorForUpdates'}"
    >Test Append</a>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onAjax"
        data-request-update="{'partial-with-script': '^#customSelectorForUpdates'}"
    >Test Prepend</a>

    <hr />
    <h3>Testing Updates via Attributes</h3>

    <div class="row">
        <div class="col-4">
            <div id="customSelectorForAppend" class="update-via-attributes panel p-2" data-ajax-update-mode="append">
                Content Will Append Here
            </div>
        </div>
        <div class="col-4">
            <div id="customSelectorForPrepend" class="update-via-attributes panel p-2" data-ajax-update-mode="prepend">
                Content Will Prepend Here
            </div>
        </div>
        <div class="col-4">
            <div id="customSelectorForReplace" class="update-via-attributes panel p-2" data-ajax-update-mode="replace">
                Content Will Replace Here
            </div>
        </div>
    </div>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onAjax"
        data-request-update="partial-with-script: '.update-via-attributes'"
    >Test Update</a>

    <hr />
    <h3>Testing AJAX Partial</h3>
    {% set foo = 'bar' %}
    {% ajaxPartial 'ajax/ajax-partial' %}
    {% ajaxPartial 'ajax/ajax-partial-nested' %}

    <div data-ajax-partial>
        <button data-request="onAjax" data-request-update="{ ajax/ajax-partial: true }" class="btn btn-primary">
            Test External Update
        </button>
    </div>

    <hr />
    <h3>Test Contact Form</h3>
    {% ajaxPartial 'ajax/ajax-contact-form' %}

    <hr />
    <h3>Test Custom URL</h3>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onTestOtherUrl"
        data-request-flash
        data-request-url="{{ 'ajax/ajax-other-url'|page }}"
    >Test External URL</a>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onTraceLog"
        data-request-query="{ page: 6 }"
    >Test Query Data</a>

    <hr />
    <h3>Test Redirects</h3>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onAjax"
        data-request-redirect="{{ 'cms/locale'|page }}"
    >Test Redirect URL</a>

    <a
        href="#"
        class="btn btn-primary"
        data-request="onAjax"
        data-request-redirect="{{ 'cms/locale'|page }}"
        data-browser-redirect-back
    >Test Redirect Back Button</a>

    <a
        href="{{ 'cms/locale'|page }}"
        class="btn btn-primary"
        data-browser-redirect-back
    >Test Redirect Back Button (No AJAX)</a>

    <h1>AJAX Exception Tests</h1>

    <div class="my-3">
        <h3>Example 1</h3>
        <p>Send form from self-updating AJAX partial and throw back NotFoundException...</p>
        {% ajaxPartial 'ajax/ajax-example-1' %}
        <p><em>This is as expected.</em></p>
        <hr />
    </div>
    <div class="my-3">
        <h3>Example 2</h3>
        <p>Send form from self-updating AJAX partial and throw back ApplicationException...</p>
        {% ajaxPartial 'ajax/ajax-example-2' %}
        <p><em>Expected behavior: Simple Javascript alert with text message as before, not another Exception thrown by <code>/vendor/twig/twig/src/Template.php</code>.</em></p>
        <hr />
    </div>
    <div class="my-3">
        <h3>Example 3</h3>
        <p>Send form from self-updating AJAX partial and throw back AjaxException...</p>
        {% ajaxPartial 'ajax/ajax-example-3' %}
        <p><em>Expected behavior: Ajax Exception message catched by form's <code>'data-request-error': 'console.log(data.message)'</code>, but exception was overwritten by another one thrown by <code>/vendor/twig/twig/src/Template.php</code>.</em></p>
        <hr />
    </div>
    <div class="my-3">
        <h3>Example 4</h3>
        <p>Send form from self-updating AJAX partial with wrong value (type whatever) and then with correct (type: correct). Validation is in AJAX handler.</p>
        {% ajaxPartial 'ajax/ajax-example-4' %}
        <p><em>This is as expected.</em></p>
        <hr />
    </div>
    <div class="my-3">
        <h3>Example 5</h3>
        <p>Send form from self-updating AJAX partial with wrong value (type whatever) and then with correct (type: correct). Validation is in Model.</p>
        <p>This issue happens in all kind of AJAX cycle when filling and throwing Validation Exception from Tailor Model, not only in self-updated ajaxPartial. Maybe a feature:-)</p>
        {% ajaxPartial 'ajax/ajax-example-5' %}
        <p><em>Expected behavior: When success, no previous form wrong state returned. Can be simply fixed with adding <code>Session::forget('_old_input')</code> to handler.</em></p>
        <hr />
    </div>
</div>
